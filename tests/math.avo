# this file uses as module

let PI = 3.14159
let HALF_PI = PI/2
let PI3_2 = PI*0.75;
let TAU = PI*2

class S {}
class W : S {}

func pow(a, b) {
    ## Returns a * a b times
    var result = 1;
    for var i = 0; i < b; ++i {
        result *= a;
    }
    return result;
}

func factorial(num) {
    # Returns factorial of num
    var i = 1;
    var result = 1;
    while i <= num {
      result *= i;
      ++i;
    }
    return result;
}

func deg2rad(degrees) {
    return degrees * PI/180.0;
}
func rad2deg(radians) {
    return radians * 180.0/PI;
}

func abs(n) {
    if n < 0 {
        return -n;
    } else {
        return n;
    }
}

func clamp(min, max, v) {
    if v > max {
        return max;
    } elif v < min {
        return min;
    }
    return v;
}

func sin(a) {
    # Returns sin of `a` angle
    var q = deg2rad(a);
    var sum = 0;
    var i = 0;

    while abs(q) > 0.0001 {
        sum += q;
        q = -q * (a*a) / (2*i + 1) * (2*i);
        ++i;
    }
    return sum;
}

func cos(a) {
    # Returns cos of `a` angle
    return sin(HALF_PI - a);
}

func tan(a) {
    # Returns tan of `a` angle
    var c = cos(a);
    if c == 0.0 {
        return 0.0;
    }
    return sin(a) / c;
}

func ctg(a) {
    # Returns ctg of `a` angle
    var s = sin(a);
    if s == 0.0 {
        return s;
    }
    return cos(a) / s;
}

func sec(a) {
    # Returns sec of `a` angle
    var c = cos(a);
    if c == 0.0 {
        return 0.0;
    }
    return 1.0 / c;
}

func csc(a) {
    # Returns cosec of `a` angle
    var s = sin(a);
    if s == 0.0 {
        return 0.0;
    }
    return 1.0 / s;
}

func sqrt(n) {
    var i = 1;
    while abs(pow(i, 2) - n) > 0.0001 {
        i = (i + n/i) / 2;
    }
    return i;
}
