class A {
    init {
    }
}

class B : A {
    var b = 123;
    init (a) {
        this::b = a;
    }
    func show_b() {
        return this::b;
    }
}

class C : B {
    var b = 0;
    var d = 0;

    init(a, b, c, d=1) {
    }

    func inc_d() {
        this::d += 1;
    }
}

var b = B(1);
var c = B(2);
var x = C(3, 2, 1);
echo(b::show_b(), c::show_b(), x::show_b());

echo(x::d);
x::inc_d();
echo(x::d);

var a = A();
echo(a);


interface Color {
    var color = "black"
    func test()
}


abstract class Animal of Color {
  func say() {
    echo("...");
  }
}

class Cat : Animal {
    func say() {
        super this::say();
        echo("meow");
    }
}

class Dog : Animal {
    func say() {
        super this::say();
        echo("woof");
    }
}

class Horse : Animal{}

var a1 = Animal();
var a2 = Cat();
var a3 = Dog();

Cat::say();  # static call

a1::say();
a2::say();
a3::say();

class X {
	func b() {
		echo("A")
	}
}

class Y : X {
	func b() {
		echo("B")
	}
	func a() {
		this::b()
		super this::b()
	}
}

Y::a()

